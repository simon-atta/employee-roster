// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataTable component should render correctly when adding a row 1`] = `
<Fragment>
  <PaginationControls
    columns={
      Array [
        Object {
          "name": "Name",
        },
        Object {
          "name": "Number",
          "sorter": [Function],
        },
      ]
    }
    filterText=""
    filteredRows={
      Immutable.List [
        Object {
          "name": "More Data",
          "number": 2,
        },
        Object {
          "name": "Some Data",
          "number": 1,
        },
      ]
    }
    history={
      Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "pathname": "/table",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    isCreatingNewRow={true}
    isReversed={false}
    itemsPerPage={5}
    location={
      Object {
        "hash": "",
        "pathname": "/table",
        "search": "",
        "state": undefined,
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {},
        "path": "/table",
        "url": "localhost:8080/table",
      }
    }
    newRowWrapper={[Function]}
    numOfFilteredRows={2}
    onCreateNewRow={[Function]}
    onSorterChange={[MockFunction]}
    page={1}
    rowWrapper={[Function]}
    rowsInPage={
      Immutable.List [
        Object {
          "name": "More Data",
          "number": 2,
        },
        Object {
          "name": "Some Data",
          "number": 1,
        },
      ]
    }
    sortByIndex={0}
    title="Data Table"
  />
  <TableComposable>
    <Caption>
      Data Table
    </Caption>
    <Thead>
      <Tr
        role="row"
      >
        <Th
          key="Name"
          role="columnheader"
          scope="col"
        >
          Name
        </Th>
        <Th
          key="Number"
          role="columnheader"
          scope="col"
          sort={
            Object {
              "columnIndex": 1,
              "onSort": [Function],
              "sortBy": Object {
                "direction": "asc",
                "index": 0,
              },
            }
          }
        >
          Number
        </Th>
        <Th
          role="columnheader"
          scope="col"
        />
      </Tr>
    </Thead>
    <Tbody>
      <TableRow>
        <TableCell
          columnName="Name"
        >
          New Data Name
        </TableCell>
        <TableCell
          columnName="Number"
        >
          New Data Number
        </TableCell>
        <TableCell
          columnName="Number"
        >
          <Button
            onClick={[Function]}
          >
            Remove
          </Button>
        </TableCell>
      </TableRow>
      <TableRow
        key="More Data"
      >
        <TableCell
          columnName="Name"
        >
          More Data
        </TableCell>
        <TableCell
          columnName="Number"
        >
          2
        </TableCell>
      </TableRow>
      <TableRow
        key="Some Data"
      >
        <TableCell
          columnName="Name"
        >
          Some Data
        </TableCell>
        <TableCell
          columnName="Number"
        >
          1
        </TableCell>
      </TableRow>
    </Tbody>
  </TableComposable>
</Fragment>
`;

exports[`DataTable component should render correctly when adding a row 2`] = `
<Fragment>
  <PaginationControls
    columns={
      Array [
        Object {
          "name": "Name",
        },
        Object {
          "name": "Number",
          "sorter": [Function],
        },
      ]
    }
    filterText=""
    filteredRows={
      Immutable.List [
        Object {
          "name": "More Data",
          "number": 2,
        },
        Object {
          "name": "Some Data",
          "number": 1,
        },
      ]
    }
    history={
      Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "pathname": "/table",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    isCreatingNewRow={false}
    isReversed={false}
    itemsPerPage={5}
    location={
      Object {
        "hash": "",
        "pathname": "/table",
        "search": "",
        "state": undefined,
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {},
        "path": "/table",
        "url": "localhost:8080/table",
      }
    }
    newRowWrapper={[Function]}
    numOfFilteredRows={2}
    onCreateNewRow={[Function]}
    onSorterChange={[MockFunction]}
    page={1}
    rowWrapper={[Function]}
    rowsInPage={
      Immutable.List [
        Object {
          "name": "More Data",
          "number": 2,
        },
        Object {
          "name": "Some Data",
          "number": 1,
        },
      ]
    }
    sortByIndex={0}
    title="Data Table"
  />
  <TableComposable>
    <Caption>
      Data Table
    </Caption>
    <Thead>
      <Tr
        role="row"
      >
        <Th
          key="Name"
          role="columnheader"
          scope="col"
        >
          Name
        </Th>
        <Th
          key="Number"
          role="columnheader"
          scope="col"
          sort={
            Object {
              "columnIndex": 1,
              "onSort": [Function],
              "sortBy": Object {
                "direction": "asc",
                "index": 0,
              },
            }
          }
        >
          Number
        </Th>
        <Th
          role="columnheader"
          scope="col"
        />
      </Tr>
    </Thead>
    <Tbody>
      <TableRow
        key="More Data"
      >
        <TableCell
          columnName="Name"
        >
          More Data
        </TableCell>
        <TableCell
          columnName="Number"
        >
          2
        </TableCell>
      </TableRow>
      <TableRow
        key="Some Data"
      >
        <TableCell
          columnName="Name"
        >
          Some Data
        </TableCell>
        <TableCell
          columnName="Number"
        >
          1
        </TableCell>
      </TableRow>
    </Tbody>
  </TableComposable>
</Fragment>
`;

exports[`DataTable component should render correctly with a few rows 1`] = `
<Fragment>
  <PaginationControls
    columns={
      Array [
        Object {
          "name": "Name",
        },
        Object {
          "name": "Number",
          "sorter": [Function],
        },
      ]
    }
    filterText=""
    filteredRows={
      Immutable.List [
        Object {
          "name": "More Data",
          "number": 2,
        },
        Object {
          "name": "Some Data",
          "number": 1,
        },
      ]
    }
    history={
      Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "pathname": "/table",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    isCreatingNewRow={false}
    isReversed={false}
    itemsPerPage={5}
    location={
      Object {
        "hash": "",
        "pathname": "/table",
        "search": "",
        "state": undefined,
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {},
        "path": "/table",
        "url": "localhost:8080/table",
      }
    }
    newRowWrapper={[Function]}
    numOfFilteredRows={2}
    onCreateNewRow={[Function]}
    onSorterChange={[MockFunction]}
    page={1}
    rowWrapper={[Function]}
    rowsInPage={
      Immutable.List [
        Object {
          "name": "More Data",
          "number": 2,
        },
        Object {
          "name": "Some Data",
          "number": 1,
        },
      ]
    }
    sortByIndex={0}
    title="Data Table"
  />
  <TableComposable>
    <Caption>
      Data Table
    </Caption>
    <Thead>
      <Tr
        role="row"
      >
        <Th
          key="Name"
          role="columnheader"
          scope="col"
        >
          Name
        </Th>
        <Th
          key="Number"
          role="columnheader"
          scope="col"
          sort={
            Object {
              "columnIndex": 1,
              "onSort": [Function],
              "sortBy": Object {
                "direction": "asc",
                "index": 0,
              },
            }
          }
        >
          Number
        </Th>
        <Th
          role="columnheader"
          scope="col"
        />
      </Tr>
    </Thead>
    <Tbody>
      <TableRow
        key="More Data"
      >
        <TableCell
          columnName="Name"
        >
          More Data
        </TableCell>
        <TableCell
          columnName="Number"
        >
          2
        </TableCell>
      </TableRow>
      <TableRow
        key="Some Data"
      >
        <TableCell
          columnName="Name"
        >
          Some Data
        </TableCell>
        <TableCell
          columnName="Number"
        >
          1
        </TableCell>
      </TableRow>
    </Tbody>
  </TableComposable>
</Fragment>
`;

exports[`DataTable component should render correctly with no rows 1`] = `
<Fragment>
  <PaginationControls
    columns={
      Array [
        Object {
          "name": "Name",
        },
        Object {
          "name": "Number",
          "sorter": [Function],
        },
      ]
    }
    filterText=""
    filteredRows={Immutable.List []}
    history={
      Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "pathname": "/table",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    isCreatingNewRow={false}
    isReversed={false}
    itemsPerPage={5}
    location={
      Object {
        "hash": "",
        "pathname": "/table",
        "search": "",
        "state": undefined,
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {},
        "path": "/table",
        "url": "localhost:8080/table",
      }
    }
    newRowWrapper={[Function]}
    numOfFilteredRows={0}
    onCreateNewRow={[Function]}
    onSorterChange={[MockFunction]}
    page={1}
    rowWrapper={[Function]}
    rowsInPage={Immutable.List []}
    sortByIndex={0}
    title="Data Table"
  />
  <TableComposable>
    <Caption>
      Data Table
    </Caption>
    <Thead>
      <Tr
        role="row"
      >
        <Th
          key="Name"
          role="columnheader"
          scope="col"
        >
          Name
        </Th>
        <Th
          key="Number"
          role="columnheader"
          scope="col"
          sort={
            Object {
              "columnIndex": 1,
              "onSort": [Function],
              "sortBy": Object {
                "direction": "asc",
                "index": 0,
              },
            }
          }
        >
          Number
        </Th>
        <Th
          role="columnheader"
          scope="col"
        />
      </Tr>
    </Thead>
    <Tbody />
  </TableComposable>
</Fragment>
`;

exports[`PaginationControls should render correctly 1`] = `
<Level
  hasGutter={true}
  style={
    Object {
      "backgroundColor": "var(--pf-global--BackgroundColor--200)",
      "padding": "5px 5px 5px 5px",
    }
  }
>
  <LevelItem>
    <FilterComponent
      filterText="My filter"
      onChange={[Function]}
    />
  </LevelItem>
  <LevelItem
    style={
      Object {
        "display": "flex",
      }
    }
  >
    <Button
      data-cy="data-table-add"
      isDisabled={false}
      onClick={[MockFunction]}
    >
      Trans(i18nKey=add)
    </Button>
    <Pagination
      className=""
      defaultToFullPage={false}
      firstPage={1}
      isCompact={false}
      isDisabled={false}
      isSticky={false}
      itemCount={100}
      itemsEnd={null}
      itemsStart={null}
      offset={0}
      onFirstClick={[Function]}
      onLastClick={[Function]}
      onNextClick={[Function]}
      onPageInput={[Function]}
      onPerPageSelect={[Function]}
      onPreviousClick={[Function]}
      onSetPage={[Function]}
      ouiaSafe={true}
      page={1}
      perPage={10}
      perPageOptions={
        Array [
          Object {
            "title": "10",
            "value": 10,
          },
          Object {
            "title": "20",
            "value": 20,
          },
          Object {
            "title": "50",
            "value": 50,
          },
          Object {
            "title": "100",
            "value": 100,
          },
        ]
      }
      titles={
        Object {
          "currPage": "Current page",
          "items": "",
          "itemsPerPage": "Items per page",
          "ofWord": "of",
          "optionsToggle": "Items per page",
          "page": "",
          "paginationTitle": "Pagination",
          "perPageSuffix": "per page",
          "toFirstPage": "Go to first page",
          "toLastPage": "Go to last page",
          "toNextPage": "Go to next page",
          "toPreviousPage": "Go to previous page",
        }
      }
      toggleTemplate={[Function]}
      variant="top"
      widgetId="pagination-options-menu-top"
    />
  </LevelItem>
</Level>
`;

exports[`RowEditButtons should render correctly 1`] = `
<Td
  role="cell"
>
  <span
    style={
      Object {
        "display": "grid",
        "gridColumnGap": "5px",
        "gridTemplateColumns": "1fr auto auto",
      }
    }
  >
    <span />
    <span>
      <Button
        data-cy="data-table-save"
        isDisabled={false}
        onClick={[Function]}
        variant="link"
      >
        <SaveIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      </Button>
    </span>
    <span>
      <Button
        data-cy="data-table-close"
        onClick={[MockFunction]}
        variant="link"
      >
        <CloseIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      </Button>
    </span>
  </span>
</Td>
`;

exports[`RowViewButtons should render correctly 1`] = `
<Td
  role="cell"
>
  <span
    style={
      Object {
        "display": "grid",
        "gridColumnGap": "5px",
        "gridTemplateColumns": "1fr auto auto",
      }
    }
  >
    <span />
    <span>
      <Button
        data-cy="data-table-edit"
        onClick={[MockFunction]}
        variant="link"
      >
        <EditIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      </Button>
    </span>
    <span>
      <Button
        data-cy="data-table-delete"
        onClick={[MockFunction]}
        variant="danger"
      >
        <TrashIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      </Button>
    </span>
  </span>
</Td>
`;
