// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Spots page DataTable newRowWrapper should be EditableSpotRow 1`] = `
<TableRow>
  <TableCell
    columnName="Trans(i18nKey=name)"
  >
    <TextInput
      onChange={[Function]}
      value=""
    />
    <InputGroupText
      key="0"
    >
      <Tooltip
        content={
          <List
            style={
              Object {
                "color": "white",
              }
            }
          >
            <ListItem>
              Trans(i18nKey=spotEmptyNameError)
            </ListItem>
          </List>
        }
      >
        <WarningTriangleIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      </Tooltip>
    </InputGroupText>
  </TableCell>
  <TableCell
    columnName="Trans(i18nKey=requiredSkillSet)"
  >
    <MultiTypeaheadSelectInput
      emptyText="Trans(i18nKey=selectRequiredSkills)"
      onChange={[Function]}
      optionToStringMap={[Function]}
      options={
        Array [
          Object {
            "id": 0,
            "name": "Skill 1",
            "tenantId": 0,
            "version": 0,
          },
        ]
      }
      value={Array []}
    />
  </TableCell>
  <RowEditButtons
    isValid={false}
    onClose={[Function]}
    onSave={[Function]}
  />
</TableRow>
`;

exports[`Spots page DataTable rowWrapper should be SpotRow 1`] = `
<TableRow>
  <TableCell
    columnName="Trans(i18nKey=name)"
  >
    <Flex>
      <FlexItem>
        <Text>
          Spot
        </Text>
      </FlexItem>
      <FlexItem>
        <Button
          onClick={[Function]}
          variant="link"
        >
          <ArrowIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        </Button>
      </FlexItem>
    </Flex>
  </TableCell>
  <TableCell
    columnName="Trans(i18nKey=requiredSkillSet)"
  >
    <ChipGroup
      aria-label="Chip group category"
      categoryName=""
      closeBtnAriaLabel="Close chip group"
      collapsedText="\${remaining} more"
      defaultIsOpen={false}
      expandedText="Show Less"
      isClosable={false}
      numChips={3}
      onClick={[Function]}
      onOverflowChipClick={[Function]}
      tooltipPosition="top"
    />
  </TableCell>
  <RowViewButtons
    onDelete={[Function]}
    onEdit={[Function]}
  />
</TableRow>
`;

exports[`Spots page clicking on the edit button in the viewer should show the editor 1`] = `
<EditableSpotRow
  isNew={false}
  onClose={[Function]}
  spot={
    Object {
      "id": 1,
      "name": "Spot",
      "requiredSkillSet": Array [],
      "tenantId": 0,
    }
  }
/>
`;

exports[`Spots page clicking on the edit button in the viewer should show the editor 2`] = `
<TableRow>
  <TableCell
    columnName="Trans(i18nKey=name)"
  >
    <Flex>
      <FlexItem>
        <Text>
          Spot
        </Text>
      </FlexItem>
      <FlexItem>
        <Button
          onClick={[Function]}
          variant="link"
        >
          <ArrowIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        </Button>
      </FlexItem>
    </Flex>
  </TableCell>
  <TableCell
    columnName="Trans(i18nKey=requiredSkillSet)"
  >
    <ChipGroup
      aria-label="Chip group category"
      categoryName=""
      closeBtnAriaLabel="Close chip group"
      collapsedText="\${remaining} more"
      defaultIsOpen={false}
      expandedText="Show Less"
      isClosable={false}
      numChips={3}
      onClick={[Function]}
      onOverflowChipClick={[Function]}
      tooltipPosition="top"
    />
  </TableCell>
  <RowViewButtons
    onDelete={[Function]}
    onEdit={[Function]}
  />
</TableRow>
`;

exports[`Spots page clicking on the edit button should show editor 1`] = `
<EditableSpotRow
  isNew={false}
  onClose={[Function]}
  spot={
    Object {
      "id": 2,
      "name": "Spot 2",
      "requiredSkillSet": Array [
        Object {
          "id": 0,
          "name": "Skill 1",
          "tenantId": 0,
          "version": 0,
        },
      ],
      "tenantId": 0,
      "version": 0,
    }
  }
/>
`;

exports[`Spots page clicking on the edit button should show editor 2`] = `
<TableRow>
  <TableCell
    columnName="Trans(i18nKey=name)"
  >
    <Flex>
      <FlexItem>
        <Text>
          Spot 2
        </Text>
      </FlexItem>
      <FlexItem>
        <Button
          onClick={[Function]}
          variant="link"
        >
          <ArrowIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        </Button>
      </FlexItem>
    </Flex>
  </TableCell>
  <TableCell
    columnName="Trans(i18nKey=requiredSkillSet)"
  >
    <ChipGroup
      aria-label="Chip group category"
      categoryName=""
      closeBtnAriaLabel="Close chip group"
      collapsedText="\${remaining} more"
      defaultIsOpen={false}
      expandedText="Show Less"
      isClosable={false}
      numChips={3}
      onClick={[Function]}
      onOverflowChipClick={[Function]}
      tooltipPosition="top"
    >
      <Chip
        className=""
        closeBtnAriaLabel="close"
        component="div"
        isOverflowChip={false}
        isReadOnly={true}
        key="Skill 1"
        onClick={[Function]}
        tooltipPosition="top"
      >
        Skill 1
      </Chip>
    </ChipGroup>
  </TableCell>
  <RowViewButtons
    onDelete={[Function]}
    onEdit={[Function]}
  />
</TableRow>
`;

exports[`Spots page should render correctly with a few spots 1`] = `
<DataTable
  columns={
    Array [
      Object {
        "name": "Trans(i18nKey=name)",
        "sorter": [Function],
      },
      Object {
        "name": "Trans(i18nKey=requiredSkillSet)",
      },
    ]
  }
  filterText=""
  filteredRows={
    Immutable.List [
      Object {
        "id": 1,
        "name": "Spot 1",
        "requiredSkillSet": Array [],
        "tenantId": 0,
        "version": 0,
      },
      Object {
        "id": 2,
        "name": "Spot 2",
        "requiredSkillSet": Array [
          Object {
            "id": 0,
            "name": "Skill 1",
            "tenantId": 0,
            "version": 0,
          },
        ],
        "tenantId": 0,
        "version": 0,
      },
    ]
  }
  history={
    Object {
      "action": "PUSH",
      "block": [MockFunction],
      "createHref": [MockFunction],
      "go": [MockFunction],
      "goBack": [MockFunction],
      "goForward": [MockFunction],
      "length": 1,
      "listen": [MockFunction],
      "location": Object {
        "hash": "",
        "pathname": "/0/spot",
        "search": "",
        "state": undefined,
      },
      "push": [MockFunction],
      "replace": [MockFunction],
    }
  }
  isReversed={false}
  itemsPerPage={10}
  location={
    Object {
      "hash": "",
      "pathname": "/0/spot",
      "search": "",
      "state": undefined,
    }
  }
  match={
    Object {
      "isExact": true,
      "params": Object {},
      "path": "/0/spot",
      "url": "localhost:8080/0/spot",
    }
  }
  newRowWrapper={[Function]}
  numOfFilteredRows={2}
  onSorterChange={[Function]}
  page={1}
  rowWrapper={[Function]}
  rowsInPage={
    Immutable.List [
      Object {
        "id": 1,
        "name": "Spot 1",
        "requiredSkillSet": Array [],
        "tenantId": 0,
        "version": 0,
      },
      Object {
        "id": 2,
        "name": "Spot 2",
        "requiredSkillSet": Array [
          Object {
            "id": 0,
            "name": "Skill 1",
            "tenantId": 0,
            "version": 0,
          },
        ],
        "tenantId": 0,
        "version": 0,
      },
    ]
  }
  sortByIndex={0}
  title="Trans(i18nKey=spots)"
/>
`;

exports[`Spots page should render correctly with no spots 1`] = `
<DataTable
  columns={
    Array [
      Object {
        "name": "Trans(i18nKey=name)",
        "sorter": [Function],
      },
      Object {
        "name": "Trans(i18nKey=requiredSkillSet)",
      },
    ]
  }
  filterText=""
  filteredRows={Immutable.List []}
  history={
    Object {
      "action": "PUSH",
      "block": [MockFunction],
      "createHref": [MockFunction],
      "go": [MockFunction],
      "goBack": [MockFunction],
      "goForward": [MockFunction],
      "length": 1,
      "listen": [MockFunction],
      "location": Object {
        "hash": "",
        "pathname": "/0/spot",
        "search": "",
        "state": undefined,
      },
      "push": [MockFunction],
      "replace": [MockFunction],
    }
  }
  isReversed={false}
  itemsPerPage={10}
  location={
    Object {
      "hash": "",
      "pathname": "/0/spot",
      "search": "",
      "state": undefined,
    }
  }
  match={
    Object {
      "isExact": true,
      "params": Object {},
      "path": "/0/spot",
      "url": "localhost:8080/0/spot",
    }
  }
  newRowWrapper={[Function]}
  numOfFilteredRows={0}
  onSorterChange={[Function]}
  page={1}
  rowWrapper={[Function]}
  rowsInPage={Immutable.List []}
  sortByIndex={0}
  title="Trans(i18nKey=spots)"
/>
`;

exports[`Spots page should render the editor correctly 1`] = `
<TableRow>
  <TableCell
    columnName="Trans(i18nKey=name)"
  >
    <TextInput
      onChange={[Function]}
      value="Spot"
    />
  </TableCell>
  <TableCell
    columnName="Trans(i18nKey=requiredSkillSet)"
  >
    <MultiTypeaheadSelectInput
      emptyText="Trans(i18nKey=selectRequiredSkills)"
      onChange={[Function]}
      optionToStringMap={[Function]}
      options={
        Array [
          Object {
            "id": 0,
            "name": "Skill 1",
            "tenantId": 0,
            "version": 0,
          },
        ]
      }
      value={Array []}
    />
  </TableCell>
  <RowEditButtons
    isValid={true}
    onClose={[Function]}
    onSave={[Function]}
  />
</TableRow>
`;

exports[`Spots page should render the viewer correctly 1`] = `
<TableRow>
  <TableCell
    columnName="Trans(i18nKey=name)"
  >
    <Flex>
      <FlexItem>
        <Text>
          Spot 2
        </Text>
      </FlexItem>
      <FlexItem>
        <Button
          onClick={[Function]}
          variant="link"
        >
          <ArrowIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        </Button>
      </FlexItem>
    </Flex>
  </TableCell>
  <TableCell
    columnName="Trans(i18nKey=requiredSkillSet)"
  >
    <ChipGroup
      aria-label="Chip group category"
      categoryName=""
      closeBtnAriaLabel="Close chip group"
      collapsedText="\${remaining} more"
      defaultIsOpen={false}
      expandedText="Show Less"
      isClosable={false}
      numChips={3}
      onClick={[Function]}
      onOverflowChipClick={[Function]}
      tooltipPosition="top"
    >
      <Chip
        className=""
        closeBtnAriaLabel="close"
        component="div"
        isOverflowChip={false}
        isReadOnly={true}
        key="Skill 1"
        onClick={[Function]}
        tooltipPosition="top"
      >
        Skill 1
      </Chip>
    </ChipGroup>
  </TableCell>
  <RowViewButtons
    onDelete={[Function]}
    onEdit={[Function]}
  />
</TableRow>
`;
