// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Export Schedule Modal should render correctly when closed 1`] = `
<Modal
  actions={
    Array [
      <Button
        aria-label="Close Modal"
        onClick={[MockFunction]}
        variant="tertiary"
      >
        Trans(i18nKey=close)
      </Button>,
      <a
        className="pf-c-button pf-m-primary"
        download={true}
        href="/rest/tenant/1/roster/shiftRosterView/excel?startDate=2018-07-01&endDate=2018-07-07&spotList=2"
        onClick={[Function]}
      >
        Trans(i18nKey=export)
      </a>,
    ]
  }
  appendTo={[Function]}
  aria-describedby=""
  aria-label=""
  aria-labelledby=""
  className=""
  hasNoBodyWrapper={false}
  isOpen={false}
  onClose={[MockFunction]}
  ouiaSafe={true}
  showClose={true}
  title="Trans(i18nKey=exportSchedule)"
  titleIconVariant={null}
  titleLabel=""
  variant="small"
>
  <Form
    id="modal-element"
    onSubmit={[Function]}
  >
    <InputGroup>
      <Label>
        Trans(i18nKey=fromDate)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Trans(i18nKey=fromDate)"
        dateFormat="MM/dd/yyyy"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        selected={2018-07-01T00:00:00.000Z}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={false}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=toDate)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Trans(i18nKey=toDate)"
        dateFormat="MM/dd/yyyy"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        selected={2018-07-07T00:00:00.000Z}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={false}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=forSpots)
      </Label>
      <MultiTypeaheadSelectInput
        aria-label="Trans(i18nKey=forSpots)"
        emptyText="Trans(i18nKey=selectSpots)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 1,
              "version": 0,
            },
          ]
        }
        value={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 1,
              "version": 0,
            },
          ]
        }
      />
    </InputGroup>
  </Form>
</Modal>
`;

exports[`Export Schedule Modal should render correctly when opened 1`] = `
<Modal
  actions={
    Array [
      <Button
        aria-label="Close Modal"
        onClick={[MockFunction]}
        variant="tertiary"
      >
        Trans(i18nKey=close)
      </Button>,
      <a
        className="pf-c-button pf-m-primary"
        download={true}
        href="/rest/tenant/1/roster/shiftRosterView/excel?startDate=2018-07-01&endDate=2018-07-07&spotList=2"
        onClick={[Function]}
      >
        Trans(i18nKey=export)
      </a>,
    ]
  }
  appendTo={[Function]}
  aria-describedby=""
  aria-label=""
  aria-labelledby=""
  className=""
  hasNoBodyWrapper={false}
  isOpen={true}
  onClose={[MockFunction]}
  ouiaSafe={true}
  showClose={true}
  title="Trans(i18nKey=exportSchedule)"
  titleIconVariant={null}
  titleLabel=""
  variant="small"
>
  <Form
    id="modal-element"
    onSubmit={[Function]}
  >
    <InputGroup>
      <Label>
        Trans(i18nKey=fromDate)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Trans(i18nKey=fromDate)"
        dateFormat="MM/dd/yyyy"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        selected={2018-07-01T00:00:00.000Z}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={false}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=toDate)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Trans(i18nKey=toDate)"
        dateFormat="MM/dd/yyyy"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        selected={2018-07-07T00:00:00.000Z}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={false}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=forSpots)
      </Label>
      <MultiTypeaheadSelectInput
        aria-label="Trans(i18nKey=forSpots)"
        emptyText="Trans(i18nKey=selectSpots)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 1,
              "version": 0,
            },
          ]
        }
        value={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 1,
              "version": 0,
            },
          ]
        }
      />
    </InputGroup>
  </Form>
</Modal>
`;
