// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Provision Shifts Modal should render correctly 1`] = `
<Modal
  actions={
    Array [
      <Button
        aria-label="Close Modal"
        onClick={[MockFunction]}
        variant="tertiary"
      >
        Trans(i18nKey=close)
      </Button>,
      <Button
        onClick={[Function]}
        variant="primary"
      >
        Trans(i18nKey=provisionShifts)
      </Button>,
    ]
  }
  appendTo={[Function]}
  aria-describedby=""
  aria-label=""
  aria-labelledby=""
  className=""
  hasNoBodyWrapper={false}
  isOpen={true}
  onClose={[MockFunction]}
  ouiaSafe={true}
  showClose={true}
  title="Trans(i18nKey=provisionShifts)"
  titleIconVariant={null}
  titleLabel=""
  variant="small"
>
  <Form
    id="modal-element"
    onSubmit={[Function]}
  >
    <InputGroup>
      <Label>
        Trans(i18nKey=fromDate)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Trans(i18nKey=fromDate)"
        dateFormat="MM/dd/yyyy"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        selected={2018-07-01T00:00:00.000Z}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={false}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=toDate)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Trans(i18nKey=toDate)"
        dateFormat="MM/dd/yyyy"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        selected={2018-07-07T00:00:00.000Z}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={false}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=startingFromRotationOffset)
      </Label>
      <TextInput
        aria-label="Trans(i18nKey=startingFromRotationOffset)"
        onChange={[Function]}
        value={2}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=forSpots)
      </Label>
      <MultiTypeaheadSelectInput
        aria-label="Trans(i18nKey=forSpots)"
        emptyText="Trans(i18nKey=selectSpots)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 1,
              "version": 0,
            },
          ]
        }
        value={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 1,
              "version": 0,
            },
          ]
        }
      />
    </InputGroup>
    <Accordion
      asDefinitionList={false}
    >
      <SpotTimeBucketSelect
        key="2"
        onUpdateSelectedTimeBucketList={[Function]}
        selectedTimeBucketList={
          Array [
            Object {
              "additionalSkillSet": Array [],
              "endTime": 2018-01-01T17:00:00.000Z,
              "id": 22,
              "repeatOnDaySetList": Array [],
              "seatList": Array [],
              "spot": Object {
                "id": 2,
                "name": "Spot",
                "requiredSkillSet": Array [
                  Object {
                    "id": 3,
                    "name": "Skill",
                    "tenantId": 0,
                    "version": 0,
                  },
                ],
                "tenantId": 1,
                "version": 0,
              },
              "startTime": 2018-01-01T09:00:00.000Z,
              "tenantId": 0,
            },
          ]
        }
        spot={
          Object {
            "id": 2,
            "name": "Spot",
            "requiredSkillSet": Array [
              Object {
                "id": 3,
                "name": "Skill",
                "tenantId": 0,
                "version": 0,
              },
            ],
            "tenantId": 1,
            "version": 0,
          }
        }
        timeBucketList={
          Array [
            Object {
              "additionalSkillSet": Array [],
              "endTime": 2018-01-01T17:00:00.000Z,
              "id": 22,
              "repeatOnDaySetList": Array [],
              "seatList": Array [],
              "spot": Object {
                "id": 2,
                "name": "Spot",
                "requiredSkillSet": Array [
                  Object {
                    "id": 3,
                    "name": "Skill",
                    "tenantId": 0,
                    "version": 0,
                  },
                ],
                "tenantId": 1,
                "version": 0,
              },
              "startTime": 2018-01-01T09:00:00.000Z,
              "tenantId": 0,
            },
          ]
        }
      />
    </Accordion>
  </Form>
</Modal>
`;

exports[`SpotTimeBucketSelect should render correctly 1`] = `
<AccordionItem>
  <AccordionToggle
    id="Spot"
    isExpanded={false}
    onClick={[Function]}
  >
    <span>
      Spot
    </span>
    <span
      style={
        Object {
          "display": "inline-block",
          "paddingLeft": "2em",
        }
      }
    >
      <Checkbox
        className=""
        id="Spot-toggle-all"
        isChecked={null}
        isDisabled={false}
        isValid={true}
        onChange={[Function]}
      />
    </span>
  </AccordionToggle>
  <AccordionContent
    isFixed={true}
    isHidden={true}
  >
    <div
      key="22"
    >
      <span>
        
              9:00 AM to 5:00 PM on
              
      </span>
      <span>
        <Checkbox
          className=""
          id="timebucket-22-toggle"
          isChecked={true}
          isDisabled={false}
          isValid={true}
          onChange={[Function]}
        />
      </span>
    </div>
    <div
      key="33"
    >
      <span>
        
              5:00 PM to 5:00 AM on
              
      </span>
      <span>
        <Checkbox
          className=""
          id="timebucket-33-toggle"
          isChecked={false}
          isDisabled={false}
          isValid={true}
          onChange={[Function]}
        />
      </span>
    </div>
  </AccordionContent>
</AccordionItem>
`;
