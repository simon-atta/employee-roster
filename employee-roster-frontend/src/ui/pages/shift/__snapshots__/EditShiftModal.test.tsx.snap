// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Edit Shift Modal should render correctly when closed 1`] = `
<Modal
  actions={
    Array [
      <Button
        aria-label="Close Modal"
        onClick={[MockFunction]}
        variant="tertiary"
      >
        Trans(i18nKey=close)
      </Button>,
      <Button
        aria-label="Save"
        isDisabled={true}
        onClick={[Function]}
      >
        Trans(i18nKey=save)
      </Button>,
    ]
  }
  appendTo={[Function]}
  aria-describedby=""
  aria-label=""
  aria-labelledby=""
  className=""
  hasNoBodyWrapper={false}
  isOpen={false}
  onClose={[MockFunction]}
  ouiaSafe={true}
  showClose={true}
  title="Trans(i18nKey=createShift)"
  titleIconVariant={null}
  titleLabel=""
  variant="small"
>
  <Form
    id="modal-element"
    key="0"
    onSubmit={[Function]}
  >
    <InputGroup>
      <Label>
        Trans(i18nKey=shiftStart)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Shift Start"
        dateFormat="MMMM dd, hh:mm a"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={true}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
      <InputGroupText
        key="0"
      >
        <Tooltip
          content={
            <List
              style={
                Object {
                  "color": "white",
                }
              }
            >
              <ListItem>
                Trans(i18nKey=noStartTime)
              </ListItem>
            </List>
          }
        >
          <WarningTriangleIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        </Tooltip>
      </InputGroupText>
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=shiftEnd)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Shift End"
        dateFormat="MMMM dd, hh:mm a"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={true}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
      <InputGroupText
        key="0"
      >
        <Tooltip
          content={
            <List
              style={
                Object {
                  "color": "white",
                }
              }
            >
              <ListItem>
                Trans(i18nKey=noEndTime)
              </ListItem>
            </List>
          }
        >
          <WarningTriangleIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        </Tooltip>
      </InputGroupText>
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=spot)
      </Label>
      <TypeaheadSelectInput
        aria-label="Spot"
        emptyText="Trans(i18nKey=selectSpot)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=additionalSkills)
      </Label>
      <MultiTypeaheadSelectInput
        aria-label="Additional Skills"
        emptyText="Trans(i18nKey=selectAdditionalSkills)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={Array []}
        value={Array []}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=employee)
      </Label>
      <TypeaheadSelectInput
        aria-label="Employee"
        emptyText="Trans(i18nKey=unassigned)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        optional={true}
        options={
          Array [
            Object {
              "color": "#FFFFFF",
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "shortId": "e1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=originalEmployee)
      </Label>
      <span
        style={
          Object {
            "width": 10,
          }
        }
      />
      <Text>
        Trans(i18nKey=unassigned)
      </Text>
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=rotationEmployee)
      </Label>
      <TypeaheadSelectInput
        aria-label="Rotation Employee"
        emptyText="Trans(i18nKey=none)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        optional={true}
        options={
          Array [
            Object {
              "color": "#FFFFFF",
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "shortId": "e1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=isPinned)
      </Label>
      <Switch
        aria-label="Is Pinned"
        id="isPinned"
        isChecked={false}
        isDisabled={false}
        onChange={[Function]}
      />
    </InputGroup>
  </Form>
</Modal>
`;

exports[`Edit Shift Modal should render correctly when opened 1`] = `
<Modal
  actions={
    Array [
      <Button
        aria-label="Close Modal"
        onClick={[MockFunction]}
        variant="tertiary"
      >
        Trans(i18nKey=close)
      </Button>,
      <Button
        aria-label="Save"
        isDisabled={true}
        onClick={[Function]}
      >
        Trans(i18nKey=save)
      </Button>,
    ]
  }
  appendTo={[Function]}
  aria-describedby=""
  aria-label=""
  aria-labelledby=""
  className=""
  hasNoBodyWrapper={false}
  isOpen={true}
  onClose={[MockFunction]}
  ouiaSafe={true}
  showClose={true}
  title="Trans(i18nKey=createShift)"
  titleIconVariant={null}
  titleLabel=""
  variant="small"
>
  <Form
    id="modal-element"
    key="0"
    onSubmit={[Function]}
  >
    <InputGroup>
      <Label>
        Trans(i18nKey=shiftStart)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Shift Start"
        dateFormat="MMMM dd, hh:mm a"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={true}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
      <InputGroupText
        key="0"
      >
        <Tooltip
          content={
            <List
              style={
                Object {
                  "color": "white",
                }
              }
            >
              <ListItem>
                Trans(i18nKey=noStartTime)
              </ListItem>
            </List>
          }
        >
          <WarningTriangleIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        </Tooltip>
      </InputGroupText>
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=shiftEnd)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Shift End"
        dateFormat="MMMM dd, hh:mm a"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={true}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
      <InputGroupText
        key="0"
      >
        <Tooltip
          content={
            <List
              style={
                Object {
                  "color": "white",
                }
              }
            >
              <ListItem>
                Trans(i18nKey=noEndTime)
              </ListItem>
            </List>
          }
        >
          <WarningTriangleIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        </Tooltip>
      </InputGroupText>
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=spot)
      </Label>
      <TypeaheadSelectInput
        aria-label="Spot"
        emptyText="Trans(i18nKey=selectSpot)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=additionalSkills)
      </Label>
      <MultiTypeaheadSelectInput
        aria-label="Additional Skills"
        emptyText="Trans(i18nKey=selectAdditionalSkills)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={Array []}
        value={Array []}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=employee)
      </Label>
      <TypeaheadSelectInput
        aria-label="Employee"
        emptyText="Trans(i18nKey=unassigned)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        optional={true}
        options={
          Array [
            Object {
              "color": "#FFFFFF",
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "shortId": "e1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=originalEmployee)
      </Label>
      <span
        style={
          Object {
            "width": 10,
          }
        }
      />
      <Text>
        Trans(i18nKey=unassigned)
      </Text>
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=rotationEmployee)
      </Label>
      <TypeaheadSelectInput
        aria-label="Rotation Employee"
        emptyText="Trans(i18nKey=none)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        optional={true}
        options={
          Array [
            Object {
              "color": "#FFFFFF",
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "shortId": "e1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=isPinned)
      </Label>
      <Switch
        aria-label="Is Pinned"
        id="isPinned"
        isChecked={false}
        isDisabled={false}
        onChange={[Function]}
      />
    </InputGroup>
  </Form>
</Modal>
`;

exports[`Edit Shift Modal should render correctly with a shift when opened 1`] = `
<Modal
  actions={
    Array [
      <Button
        aria-label="Close Modal"
        onClick={[MockFunction]}
        variant="tertiary"
      >
        Trans(i18nKey=close)
      </Button>,
      <Button
        aria-label="Delete"
        onClick={[Function]}
        variant="danger"
      >
        Trans(i18nKey=delete)
      </Button>,
      <Button
        aria-label="Save"
        isDisabled={false}
        onClick={[Function]}
      >
        Trans(i18nKey=save)
      </Button>,
    ]
  }
  appendTo={[Function]}
  aria-describedby=""
  aria-label=""
  aria-labelledby=""
  className=""
  hasNoBodyWrapper={false}
  isOpen={true}
  onClose={[MockFunction]}
  ouiaSafe={true}
  showClose={true}
  title="Trans(i18nKey=editShift)"
  titleIconVariant={null}
  titleLabel=""
  variant="small"
>
  <Form
    id="modal-element"
    key="0"
    onSubmit={[Function]}
  >
    <InputGroup>
      <Label>
        Trans(i18nKey=shiftStart)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Shift Start"
        dateFormat="MMMM dd, hh:mm a"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        selected={2018-07-01T09:00:00.000Z}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={true}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=shiftEnd)
      </Label>
      <t
        allowSameDay={false}
        aria-label="Shift End"
        dateFormat="MMMM dd, hh:mm a"
        dateFormatCalendar="LLLL yyyy"
        disabled={false}
        disabledKeyboardNavigation={false}
        dropdownMode="scroll"
        inlineFocusSelectedMonth={false}
        monthsShown={1}
        nextMonthButtonLabel="Next Month"
        nextYearButtonLabel="Next Year"
        onBlur={[Function]}
        onCalendarClose={[Function]}
        onCalendarOpen={[Function]}
        onChange={[Function]}
        onClickOutside={[Function]}
        onFocus={[Function]}
        onInputClick={[Function]}
        onInputError={[Function]}
        onKeyDown={[Function]}
        onMonthChange={[Function]}
        onSelect={[Function]}
        onYearChange={[Function]}
        preventOpenOnFocus={false}
        previousMonthButtonLabel="Previous Month"
        previousYearButtonLabel="Previous Year"
        readOnly={false}
        renderDayContents={[Function]}
        selected={2018-07-01T17:00:00.000Z}
        shouldCloseOnSelect={true}
        showMonthYearPicker={false}
        showPopperArrow={true}
        showPreviousMonths={false}
        showQuarterYearPicker={false}
        showTimeInput={false}
        showTimeSelect={true}
        strictParsing={false}
        timeCaption="Time"
        timeInputLabel="Time"
        timeIntervals={30}
        withPortal={false}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=spot)
      </Label>
      <TypeaheadSelectInput
        aria-label="Spot"
        emptyText="Trans(i18nKey=selectSpot)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
        value={
          Object {
            "id": 2,
            "name": "Spot",
            "requiredSkillSet": Array [
              Object {
                "id": 3,
                "name": "Skill",
                "tenantId": 0,
                "version": 0,
              },
            ],
            "tenantId": 0,
            "version": 0,
          }
        }
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=additionalSkills)
      </Label>
      <MultiTypeaheadSelectInput
        aria-label="Additional Skills"
        emptyText="Trans(i18nKey=selectAdditionalSkills)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={Array []}
        value={Array []}
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=employee)
      </Label>
      <TypeaheadSelectInput
        aria-label="Employee"
        emptyText="Trans(i18nKey=unassigned)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        optional={true}
        options={
          Array [
            Object {
              "color": "#FFFFFF",
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "shortId": "e1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
        value={
          Object {
            "color": "#FFFFFF",
            "contract": Object {
              "id": 5,
              "maximumMinutesPerDay": 10,
              "maximumMinutesPerMonth": 500,
              "maximumMinutesPerWeek": 70,
              "maximumMinutesPerYear": 6000,
              "name": "Basic Contract",
              "tenantId": 0,
              "version": 0,
            },
            "id": 4,
            "name": "Employee 1",
            "shortId": "e1",
            "skillProficiencySet": Array [
              Object {
                "id": 6,
                "name": "Not Required Skill",
                "tenantId": 0,
                "version": 0,
              },
            ],
            "tenantId": 0,
            "version": 0,
          }
        }
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=originalEmployee)
      </Label>
      <span
        style={
          Object {
            "width": 10,
          }
        }
      />
      <Text>
        Trans(i18nKey=unassigned)
      </Text>
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=rotationEmployee)
      </Label>
      <TypeaheadSelectInput
        aria-label="Rotation Employee"
        emptyText="Trans(i18nKey=none)"
        onChange={[Function]}
        optionToStringMap={[Function]}
        optional={true}
        options={
          Array [
            Object {
              "color": "#FFFFFF",
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "shortId": "e1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
        value={
          Object {
            "color": "#FFFFFF",
            "contract": Object {
              "id": 5,
              "maximumMinutesPerDay": 10,
              "maximumMinutesPerMonth": 500,
              "maximumMinutesPerWeek": 70,
              "maximumMinutesPerYear": 6000,
              "name": "Basic Contract",
              "tenantId": 0,
              "version": 0,
            },
            "id": 7,
            "name": "Rotation Employee",
            "shortId": "e1",
            "skillProficiencySet": Array [
              Object {
                "id": 6,
                "name": "Not Required Skill",
                "tenantId": 0,
                "version": 0,
              },
            ],
            "tenantId": 0,
            "version": 0,
          }
        }
      />
    </InputGroup>
    <InputGroup>
      <Label>
        Trans(i18nKey=isPinned)
      </Label>
      <Switch
        aria-label="Is Pinned"
        id="isPinned"
        isChecked={false}
        isDisabled={false}
        onChange={[Function]}
      />
    </InputGroup>
  </Form>
</Modal>
`;
